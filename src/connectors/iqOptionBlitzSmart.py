#!/usr/bin/env python3
"""
IQ Option Blitz Smart - Busca botones por texto, no por coordenadas
"""

import sys
import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')

class IQOptionBlitzSmart:
    def __init__(self):
        self.driver = None
        
    def setup_chrome(self):
        """Configurar Chrome nuevo"""
        try:
            logging.info("üîß Configurando Chrome...")
            
            chrome_options = Options()
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logging.info("‚úÖ Chrome configurado")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Error configurando Chrome: {e}")
            return False
    
    def open_blitz(self):
        """Abrir IQ Option y navegar a Blitz"""
        try:
            logging.info("üåê Abriendo IQ Option...")
            self.driver.get("https://iqoption.com/")
            
            logging.info("üë§ HAZ LOGIN MANUALMENTE - Tienes 30 segundos")
            time.sleep(30)
            
            logging.info("üéØ NAVEGA A BLITZ MANUALMENTE - Tienes 30 segundos")
            time.sleep(30)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Error abriendo Blitz: {e}")
            return False
    
    def find_blitz_buttons(self):
        """Buscar botones de Blitz por texto"""
        try:
            logging.info("üîç Buscando botones de Blitz...")
            
            # Lista de posibles textos para botones de compra/venta
            buy_texts = [
                "Higher", "HIGHER", "Compra", "COMPRA", "Call", "CALL", 
                "Up", "UP", "Arriba", "ARRIBA", "Buy", "BUY", "M√°s alto"
            ]
            
            sell_texts = [
                "Lower", "LOWER", "Venta", "VENTA", "Put", "PUT",
                "Down", "DOWN", "Abajo", "ABAJO", "Sell", "SELL", "M√°s bajo"
            ]
            
            found_buttons = {"buy": None, "sell": None}
            
            # Buscar todos los botones en la p√°gina
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            logging.info(f"üìä Encontrados {len(buttons)} botones en total")
            
            for button in buttons:
                try:
                    button_text = button.text.strip()
                    if button_text:
                        logging.info(f"   - Bot√≥n: '{button_text}'")
                        
                        # Verificar si es bot√≥n de compra
                        if any(text in button_text for text in buy_texts):
                            found_buttons["buy"] = button
                            logging.info(f"‚úÖ Bot√≥n COMPRA encontrado: '{button_text}'")
                        
                        # Verificar si es bot√≥n de venta
                        elif any(text in button_text for text in sell_texts):
                            found_buttons["sell"] = button
                            logging.info(f"‚úÖ Bot√≥n VENTA encontrado: '{button_text}'")
                            
                except Exception as e:
                    continue
            
            return found_buttons
            
        except Exception as e:
            logging.error(f"‚ùå Error buscando botones: {e}")
            return {"buy": None, "sell": None}
    
    def execute_blitz_trade(self, direction):
        """Ejecutar operaci√≥n Blitz buscando por texto"""
        try:
            logging.info(f"üéØ Ejecutando Blitz {direction.upper()} buscando por texto")
            
            # Buscar botones
            buttons = self.find_blitz_buttons()
            
            # Seleccionar bot√≥n seg√∫n direcci√≥n
            if direction.upper() in ["CALL", "COMPRA", "BUY", "HIGHER"]:
                target_button = buttons["buy"]
                action = "COMPRA"
            else:
                target_button = buttons["sell"] 
                action = "VENTA"
            
            if target_button:
                logging.info(f"üñ±Ô∏è Haciendo clic en bot√≥n {action}: '{target_button.text}'")
                target_button.click()
                
                logging.info(f"‚úÖ Operaci√≥n {action} ejecutada exitosamente")
                return {
                    "success": True, 
                    "message": f"Blitz {action} ejecutado - Bot√≥n: '{target_button.text}'"
                }
            else:
                logging.error(f"‚ùå No se encontr√≥ bot√≥n para {action}")
                return {
                    "success": False, 
                    "message": f"No se encontr√≥ bot√≥n de {action}"
                }
                
        except Exception as e:
            logging.error(f"‚ùå Error ejecutando Blitz: {e}")
            return {"success": False, "message": str(e)}
    
    def debug_page(self):
        """Mostrar todos los elementos de la p√°gina para debug"""
        try:
            logging.info("üîç DEBUG - Analizando p√°gina actual...")
            
            # Esperar a que la p√°gina cargue completamente
            logging.info("‚è≥ Esperando 5 segundos para que cargue completamente...")
            time.sleep(5)
            
            # URL y t√≠tulo
            logging.info(f"üìÑ URL: {self.driver.current_url}")
            logging.info(f"üìÑ T√≠tulo: {self.driver.title}")
            
            # TODOS los elementos con texto (m√°s amplio)
            all_elements = self.driver.find_elements(By.XPATH, "//*[text()]")
            logging.info(f"üìù Elementos con texto: {len(all_elements)}")
            for i, elem in enumerate(all_elements[:20]):
                text = elem.text.strip()
                tag = elem.tag_name
                classes = elem.get_attribute("class")
                if text and len(text) < 50:
                    logging.info(f"   {i+1}. [{tag}] '{text}' | Clases: {classes}")
            
            # Buscar espec√≠ficamente elementos que contengan palabras clave
            keywords = ["higher", "lower", "call", "put", "compra", "venta", "up", "down"]
            logging.info("üîç Buscando elementos con palabras clave...")
            
            for keyword in keywords:
                elements = self.driver.find_elements(By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{keyword}')]")
                if elements:
                    logging.info(f"   üéØ '{keyword}': {len(elements)} elementos encontrados")
                    for elem in elements[:3]:
                        logging.info(f"      - [{elem.tag_name}] '{elem.text.strip()}'")
            
            # Buscar botones espec√≠ficamente
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            logging.info(f"üîò Botones encontrados: {len(buttons)}")
            for i, btn in enumerate(buttons[:10]):
                text = btn.text.strip()
                classes = btn.get_attribute("class")
                onclick = btn.get_attribute("onclick")
                if text or classes or onclick:
                    logging.info(f"   {i+1}. Texto: '{text}' | Clases: '{classes}' | OnClick: '{onclick}'")
            
            # Buscar elementos clickeables
            clickable = self.driver.find_elements(By.XPATH, "//*[@onclick or @role='button' or contains(@class, 'btn') or contains(@class, 'button')]")
            logging.info(f"üñ±Ô∏è Elementos clickeables: {len(clickable)}")
            for i, elem in enumerate(clickable[:10]):
                text = elem.text.strip()[:30]
                tag = elem.tag_name
                classes = elem.get_attribute("class")
                if text:
                    logging.info(f"   {i+1}. [{tag}] '{text}' | Clases: '{classes}'")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Error en debug: {e}")
            return False
    
    def close(self):
        """Cerrar el navegador"""
        if self.driver:
            self.driver.quit()

def main():
    """Funci√≥n principal"""
    if len(sys.argv) < 2:
        print(json.dumps({"success": False, "message": "Comando requerido"}))
        return
    
    command = sys.argv[1]
    blitz = IQOptionBlitzSmart()
    
    try:
        if command == "buy":
            if len(sys.argv) < 3:
                print(json.dumps({"success": False, "message": "Direcci√≥n requerida (call/put)"}))
                return
            
            direction = sys.argv[2]
            
            if not blitz.setup_chrome():
                print(json.dumps({"success": False, "message": "Error configurando Chrome"}))
                return
            
            if not blitz.open_blitz():
                print(json.dumps({"success": False, "message": "Error abriendo Blitz"}))
                return
            
            result = blitz.execute_blitz_trade(direction)
            print(json.dumps(result))
            
        elif command == "debug":
            if not blitz.setup_chrome():
                print(json.dumps({"success": False, "message": "Error configurando Chrome"}))
                return
            
            if not blitz.open_blitz():
                print(json.dumps({"success": False, "message": "Error abriendo Blitz"}))
                return
            
            success = blitz.debug_page()
            print(json.dumps({"success": success, "message": "Debug completado"}))
            
        else:
            print(json.dumps({"success": False, "message": f"Comando desconocido: {command}"}))
            
    except Exception as e:
        print(json.dumps({"success": False, "message": str(e)}))
    finally:
        blitz.close()

if __name__ == "__main__":
    main()
