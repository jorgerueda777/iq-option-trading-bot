const HistoricalDownloader = require('../src/utils/historicalDownloader');
const Logger = require('../src/utils/logger');

async function testDownload() {
  const logger = new Logger('TestRetrospective');
  
  try {
    logger.info('üîÑ PROBANDO AN√ÅLISIS RETROSPECTIVO COMPLETO');
    
    // Inicializar descargador (sin conector IQ)
    const downloader = new HistoricalDownloader(null);
    await downloader.initialize();
    
    logger.info('‚úÖ Base de datos inicializada');
    
    // PROCESAR TODOS LOS PARES SIMULT√ÅNEAMENTE
    const assets = [
      'EURUSD-OTC',  // Ya tiene datos, se saltar√°
      'GBPUSD-OTC',
      'USDJPY-OTC', 
      'AUDUSD-OTC',
      'USDCAD-OTC',
      'EURJPY-OTC',
      'GBPJPY-OTC',
      'EURGBP-OTC',
      'AUDJPY-OTC',
      'NZDUSD-OTC',
      'USDCHF-OTC',
      'EURCHF-OTC',
      'GBPCHF-OTC',
      'AUDCHF-OTC',
      'CADCHF-OTC'
    ];
    
    const daysBack = 180; // 6 meses = ~180 d√≠as
    
    logger.info(`üöÄ PROCESAMIENTO MASIVO PARALELO:`);
    logger.info(`   üìä ${assets.length} pares √ó ${daysBack} d√≠as √ó 1440 minutos = ${assets.length * daysBack * 1440} velas totales`);
    
    const startTime = Date.now();
    
    try {
      // PROCESAR TODOS LOS PARES SIMULT√ÅNEAMENTE (INCLUYENDO EURUSD)
      logger.info(`üöÄ Iniciando procesamiento simult√°neo de ${assets.length} pares...`);
      
      const promises = assets.map(async (asset, index) => {
        try {
          logger.info(`üîÑ [${index + 1}/${assets.length}] Iniciando ${asset}...`);
          const saved = await downloader.analyzeAndSaveRetrospective(asset, daysBack);
          logger.info(`‚úÖ [${index + 1}/${assets.length}] ${asset} COMPLETADO: ${saved.toLocaleString()} velas`);
          return { asset, saved, success: true };
        } catch (error) {
          logger.error(`‚ùå [${index + 1}/${assets.length}] ${asset} FALL√ì: ${error.message}`);
          return { asset, saved: 0, success: false, error: error.message };
        }
      });
      
      // Esperar a que todos terminen simult√°neamente
      logger.info(`‚è≥ Esperando a que completen los ${assets.length} pares...`);
      const results = await Promise.all(promises);
      
      const endTime = Date.now();
      const duration = Math.round((endTime - startTime) / 1000);
      const minutes = Math.round(duration / 60);
      
      // Resumen final
      const successful = results.filter(r => r.success);
      const failed = results.filter(r => !r.success);
      const totalVelas = successful.reduce((sum, r) => sum + r.saved, 0);
      
      logger.info(`\nüéØ PROCESAMIENTO MASIVO COMPLETADO:`);
      logger.info(`   ‚úÖ Exitosos: ${successful.length}/${assets.length} pares`);
      logger.info(`   ‚ùå Fallidos: ${failed.length}/${assets.length} pares`);
      logger.info(`   üìä Total velas: ${totalVelas.toLocaleString()}`);
      logger.info(`   ‚è±Ô∏è Tiempo total: ${minutes} minutos (${duration} segundos)`);
      
      if (failed.length > 0) {
        logger.warn(`\n‚ö†Ô∏è Pares que fallaron:`);
        failed.forEach(f => logger.warn(`   - ${f.asset}: ${f.error}`));
      }
      
      // Mostrar estad√≠sticas finales
      const stats = await downloader.getStats();
      logger.info(`\nüìà ESTAD√çSTICAS FINALES:`);
      stats.forEach(stat => {
        logger.info(`üìä ${stat.asset}: ${stat.total_candles.toLocaleString()} velas (${stat.oldest_date} ‚Üí ${stat.newest_date})`);
      });
      
    } catch (error) {
      logger.error(`‚ùå Error en procesamiento masivo:`, error.message);
    }
    
    // Cerrar base de datos
    await downloader.close();
    logger.info('\nüéâ PRUEBA COMPLETADA');
    
  } catch (error) {
    logger.error('‚ùå Error en prueba:', error);
    process.exit(1);
  }
}

// Ejecutar
testDownload()
  .then(() => {
    console.log('\n‚úÖ Descarga exitosa');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå Descarga fall√≥:', error);
    process.exit(1);
  });
